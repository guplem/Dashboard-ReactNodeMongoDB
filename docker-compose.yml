services:
  dashboard:
    build:
      context: ./dashboard
      dockerfile: docker/dev/Dockerfile
    ports:
      - "3000:8080"
    env_file:
      - ./dashboard/.env
    volumes:
      - ./dashboard:/app
      - /app/node_modules # This is often done to ensure that the node_modules directory inside the container is isolated and not affected by the host machine's environment. It can also prevent the host's node_modules from being overwritten by the container's
    depends_on:
      - api
    networks:
      - app-network

  api:
    build:
      context: ./api
      dockerfile: docker/dev/Dockerfile
    ports:
      - "3001:8080"
    env_file:
      - ./api/.env
    volumes:
      - ./api:/app
      - /app/node_modules # This is often done to ensure that the node_modules directory inside the container is isolated and not affected by the host machine's environment. It can also prevent the host's node_modules from being overwritten by the container's
    depends_on:
      - database
    networks:
      - app-network

  database:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: db-password-secure
      MYSQL_DATABASE: mydb
    ports:
      - "3306:3306"
    volumes:
      - ./database/data:/var/lib/mysql # Persist data within the host machine
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
